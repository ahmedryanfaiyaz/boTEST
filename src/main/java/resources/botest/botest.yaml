---
openapi: "3.0.1"
info:
  title: "WebAPI_BOTest"
  version: "1.0"
servers:
- url: "https://localhost:7166"
paths:
  /api/Category:
    get:
      tags:
      - "Category"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
    post:
      tags:
      - "Category"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
          text/json:
            schema:
              $ref: "#/components/schemas/Category"
          application/*+json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: "Success"
    put:
      tags:
      - "Category"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
          text/json:
            schema:
              $ref: "#/components/schemas/Category"
          application/*+json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: "Success"
  /api/Category/{id}:
    get:
      tags:
      - "Category"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            text/json:
              schema:
                $ref: "#/components/schemas/Pet"
  /api/Pet:
    get:
      tags:
      - "Pet"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
  /api/Pet/{id}:
    get:
      tags:
      - "Pet"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Pet"
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
            text/json:
              schema:
                $ref: "#/components/schemas/Pet"
  /api/PhotoUrl:
    get:
      tags:
      - "PhotoUrl"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PhotoUrl"
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PhotoUrl"
            text/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PhotoUrl"
    post:
      tags:
      - "PhotoUrl"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhotoUrl"
          text/json:
            schema:
              $ref: "#/components/schemas/PhotoUrl"
          application/*+json:
            schema:
              $ref: "#/components/schemas/PhotoUrl"
      responses:
        "200":
          description: "Success"
    put:
      tags:
      - "PhotoUrl"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhotoUrl"
          text/json:
            schema:
              $ref: "#/components/schemas/PhotoUrl"
          application/*+json:
            schema:
              $ref: "#/components/schemas/PhotoUrl"
      responses:
        "200":
          description: "Success"
  /api/PhotoUrl/{id}:
    get:
      tags:
      - "PhotoUrl"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "integer"
          format: "int32"
      responses:
        "200":
          description: "Success"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/PhotoUrl"
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoUrl"
            text/json:
              schema:
                $ref: "#/components/schemas/PhotoUrl"
components:
  schemas:
    Category:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
          nullable: true
      additionalProperties: false
    Pet:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
          nullable: true
        status:
          $ref: "#/components/schemas/PetStatus"
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: "array"
          items:
            $ref: "#/components/schemas/PhotoUrl"
          nullable: true
      additionalProperties: false
    PetStatus:
      enum:
      - 0
      - 1
      - 2
      type: "integer"
      format: "int32"
    PhotoUrl:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        url:
          type: "string"
          nullable: true
      additionalProperties: false
